# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Descargar código
        uses: actions/checkout@v4

      - uses: actions/setup-node@v3
        with:
          node-version: 23
      - name: Install Dependencies
        run: npm install
      - name: Generate Prisma Client
        run: npx prisma generate
      - name: Construir aplicación
        run: npm run build 
      - name: build seed
        run: npm run seed
      - name: Configurar Docker
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Construir y subir imagen a Docker Hub
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/food_app_back:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/food_app_back:latest

      - name: Conectar con VPS y actualizar contenedor
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << EOF
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/food_app_back:latest
            docker stop food_app_back || true
            docker rm food_app_back || true
            docker run -d --name food_app_back \
              -p 8060:80 \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              -e CLOUD_NAME="${{ secrets.CLOUD_NAME }}" \
              -e API_KEY="${{ secrets.API_KEY }}" \
              -e API_SECRET="${{ secrets.API_SECRET }}" \
              -e SECRET_JWT="${{ secrets.SECRET_JWT }}" \
              -e REDIRED_SUCCESS_URL="${{ secrets.REDIRED_SUCCESS_URL}}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/app:latest
          EOF
